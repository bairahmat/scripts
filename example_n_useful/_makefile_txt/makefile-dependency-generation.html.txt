   Link: canonical

  current community

     * chat
       Code Review
     * Code Review Meta

  your communities

   Sign up or log in to customize your list.

  more stack exchange communities

   company blog
   Stack Exchange Inbox  Reputation and Badges
   sign up log in tour help 
     * Tour Start here for a quick overview of the site
     * Help Center Detailed answers to any questions you might have
     * Meta Discuss the workings and policies of this site
     * About Us Learn more about Stack Overflow the company
     * Business Learn more about hiring developers or posting ads with us
   _____________________
   Code Review
     * Questions
     * Tags
     * Users
     * Badges
     * Unanswered
     * Ask Question
   Link:
   https://cdn.sstatic.net/Sites/codereview/img/apple-touch-icon.png?v=0a72875519a4
   _
   Code Review Stack Exchange is a question and answer site for peer
   programmer code reviews. Join them; it only takes a minute:

   Sign up
   Here's how it works:
    1. Anybody can ask a question
    2. Anybody can answer
    3. The best answers are voted up and rise to the top

                         makefile dependency generation

              I need automatic dependency generation to be done in my         
              makefile. So, I have tried to write one, after googling for     
              similar ones. I have found some ways to do that, but the        
              problem is that they are usually too complicated for me         
              (because of usage of sed command etc. and I want a way for me   
              to create a makefile without the need of refering to some other 
              makefile).                                                      
                                                                              
              Below is a makefile I hope should do the same job i.e.          
              automatically find out all the dependencies of the object files 
              and build them. Could you please review this makefile and point 
              out cases where the build may fail when it should not have?     
                                                                              
              Gpp=g++                                                         
              srcs=$(wildcard *.cpp)                                          
              objs=$(srcs:.cpp=.o)                                            
              deps=$(srcs:.cpp=.d)                                            
                                                                              
              default:test                                                    
                                                                              
              %.o:%.d                                                         
                  $(Gpp) -c $*.cpp                                            
   up vote 15                                                                 
   down vote  %.d:%.cpp                                                       
   favorite       echo -n "$*.d ">$*.d                                        
   3              $(Gpp) -MM $*.cpp>>$*.d                                     
                                                                              
              test: $(objs)                                                   
                  $(Gpp) $^ -o $@                                             
                                                                              
              -include $(deps)                                                
                                                                              
              .PHONY:clean default                                            
                                                                              
              clean:                                                          
                  -rm -rf *.o test *.d                                        
                                                                              
              One place where the makefile fails is when for example a.cpp    
              initially included a1.h but it has been updated to exclude a1.h 
              and a1.h file has been deleted from file-system. So, except     
              that is there any place that this makefile fails?               
                                                                              
              c++ makefile                                                    
                                                                              
                                        edited Jan 27 '12 asked May 22 '11 at 
              share|improve this                  at 9:28 10:07               
              question                              [IMG] [IMG]               
                                                palacsint nagavamsikrishna    
                                              28.5k969152 17614               
                   You may want to investigate the -MP option. "This option   
                   instructs CPP to add a phony target for each dependency    
              5    other than the main file, causing each to depend on        
                   nothing. These dummy rules work around errors 'make' gives 
                   if you remove header files without updating the 'Makefile' 
                   to match." – Charles Bailey May 22 '11 at 12:01            
                   @Charles Bailey : thanks! that made it even nicer          
                   – nagavamsikrishna May 22 '11 at 16:58                     
                                                                              
              add a comment |  expand to show all comments on this post       

3 Answers

   active oldest votes

                  Not to be too blunt; but, you're going about this the wrong 
                  way. Look into the command line option -MMD for GCC,        
                  specify it when compiling your source; and, retain the      
                  inclusion statement for dependencies.                       
                                                                              
                  Also, no need for a default target. The first target is the 
                  default target.                                             
                                                                              
                  An example:                                                 
                                                                              
                  Gpp = g++                                                   
                  srcs = $(wildcard *.cpp)                                    
                  objs = $(srcs:.cpp=.o)                                      
                  deps = $(srcs:.cpp=.d)                                      
                                                                              
   up vote 9 down test: $(objs)                                               
   vote               $(Gpp) $^ -o $@                                         
                                                                              
                  %.o: %.cpp                                                  
                      $(Gpp) -MMD -MP -c $< -o $@                             
                                                                              
                  .PHONY: clean                                               
                                                                              
                  # $(RM) is rm -f by default                                 
                  clean:                                                      
                      $(RM) $(objs) $(deps) test                              
                                                                              
                  -include $(deps)                                            
                                                                              
                                            answered Apr 23 '12 at 10:05      
                  share|improve this answer                        [IMG]      
                                                             Ryan Leckey      
                                                                   18612      
                       This is the right way to approach the problem.         
                       Dependencies are only useful in re-compilation         
                       (everything gets built the first time through), so you 
                       don't need to generate the .d files in a separate      
                       step. – bta Oct 17 '12 at 21:35                        
                                                                              
                  add a comment |  expand to show all comments on this post   

             That will likely generate deps all the time, even if your target 
             is 'clean'. Put the dep targets and includes in an ifeq block    
             which checks the makefile target, then there wont be any         
             dependency generation prior to cleaning (since those files       
             should be removed by the clean, it is a waste to generate them   
             prior to clean).                                                 
                                                                              
             ifeq ($(MAKECMDGOALS),clean)                                     
             # doing clean, so dont make deps.                                
             deps=                                                            
             else                                                             
             # doing build, so make deps.                                     
             deps=$(srcs:.cpp=.d)                                             
                                                                              
             %.d:%.cpp                                                        
                echo -n "$*.d ">$*.d                                          
                $(Gpp) -MM $*.cpp>>$*.d                                       
                                                                              
   up vote 6 -include $(deps)                                                 
   down vote endif # ($(MAKECMDGOALS),clean)                                  
                                                                              
             Also it is much cleaner to create subdirs and place the .d and   
             .o files in the subdirs. Then the source directories (i.e.       
             'src', ...) remain spotless and the dangerous "-rm -rf *.o test  
             *.d" is completely avoided.                                      
                                                                              
             Also "-rm -rf *.o test *.d" in itself is not optimal. Best to    
             only remove what is defined, don't remove arbitrary files (and   
             no need for "-r" either). New code:                              
                                                                              
             target=test                                                      
             rm -f $(objs) $(srcs:.cpp=.d) $(target)                          
                                                                              
                                                          answered Jul 20 '11 
                                       edited Jul 27 '11             at 21:40 
             share|improve this answer           at 2:24                [IMG] 
                                                          Jonathan Cline IEEE 
                                                                         1813 
                                                                              
             add a comment |  expand to show all comments on this post        

     Not exactly what you are asking for but I would suggest using cmake to         
     generate the Makefile. cmake is good at automatically finding dependencies and 
     it also lets you build in a separate build directory.                          
                                                                                    
     http://www.cmake.org                                                           
                                                                                    
     First create a file called CMakeLists.txt with this content:                   
                                                                                    
     cmake_minimum_required(VERSION 2.8)                                            
     project(test)                                                                  
     file(GLOB files *.cpp)                                                         
     add_executable(test ${files})                                                  
     install(TARGETS test RUNTIME DESTINATION bin)                                  
                                                                                    
     then build and install your program test like this                             
                                                                                    
     erik@linux:~$ ls ~/codereview/                                                 
     file.cpp  file.h  CMakeLists.txt  main.cpp                                     
     erik@linux:~$ mkdir /tmp/build                                                 
     erik@linux:~$ mkdir /tmp/install                                               
     erik@linux:~$ cd /tmp/build/                                                   
     erik@linux:/tmp/build$ cmake -DCMAKE_INSTALL_PREFIX=/tmp/install ~/codereview/ 
     -- The C compiler identification is GNU                                        
     -- The CXX compiler identification is GNU                                      
     -- Check for working C compiler: /usr/bin/gcc                                  
up   -- Check for working C compiler: /usr/bin/gcc -- works                         
vote -- Detecting C compiler ABI info                                               
3    -- Detecting C compiler ABI info - done                                        
down -- Check for working CXX compiler: /usr/bin/c++                                
vote -- Check for working CXX compiler: /usr/bin/c++ -- works                       
     -- Detecting CXX compiler ABI info                                             
     -- Detecting CXX compiler ABI info - done                                      
     -- Configuring done                                                            
     -- Generating done                                                             
     -- Build files have been written to: /tmp/build                                
     erik@linux:/tmp/build$ make                                                    
     Scanning dependencies of target test                                           
     [ 50%] Building CXX object CMakeFiles/test.dir/main.cpp.o                      
     [100%] Building CXX object CMakeFiles/test.dir/file.cpp.o                      
     Linking CXX executable test                                                    
     [100%] Built target test                                                       
     erik@linux:/tmp/build$ ls -l /tmp/build/test                                   
     -rwxrwxr-x 1 erik erik 7702 2012-04-12 16:58 /tmp/build/test                   
     erik@linux:/tmp/build$ make install                                            
     [100%] Built target test                                                       
     Install the project...                                                         
     -- Install configuration: ""                                                   
     -- Installing: /tmp/install/bin/test                                           
     erik@linux:/tmp/build$ ls -l /tmp/install/bin/test                             
     -rwxr-xr-x 1 erik erik 7702 2012-04-12 16:58 /tmp/install/bin/test             
                                                                                    
                               answered Apr 12 '12 at 15:25                         
     share|improve this answer                        [IMG]                         
                                               Erik Sjölund                         
                                                       1515                         
          +1 for bringing up CMake, but please, please, never use file(GLOB). It    
          completely breaks CMake (i.e. when you add or remove source files you     
          will have to re-run CMake manually). Just list the sources explicitly.    
          It's not so much work... – Michael Wild Apr 24 '12 at 9:41                
          Interesting point. I looked around and found this stackoverflow question  
     1    that discuss advantages and disadvantages of using file(GLOB). – Erik     
          Sjölund May 2 '12 at 7:44                                                 
                                                                                    
     add a comment |  expand to show all comments on this post                      

Your Answer

   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
   __________________________________________________________________________
    
   draft saved
   draft discarded
   _____________________

  Sign up or log in

   Sign up using Google

   Sign up using Facebook

   Sign up using Email and Password

  Post as a guest

   Name _______________________________  
   Email _______________________________ 

  Post as a guest

   Name _______________________________  
   Email _______________________________ 

   [ Post Your Answer ] discard

   By posting your answer, you agree to the privacy policy and terms of
   service.

Not the answer you're looking for? Browse other questions tagged c++ makefile or
ask your own question.

   asked  6 years, 2 months ago 
   viewed 9,894 times           
   active 5 years, 3 months ago 

    Related

   7
   Improving Makefile and general C++ project structure
   3
   Makefile — Platform Dependency
   2
   How can I improve this Makefile?
   5
   Generic Makefile
   7
   Makefile for C++ OpenGL with GLFW and glad
   4
   Simplifying a Makefile
   4
   Makefile for compiling shared libraries
   3
   Makefile for refactored recursive breadth first search Knight Tour
   1
   My first functional Makefile
   6
   Generic Makefile handling unit testing and folder structure

    Hot Network Questions

     * What is the use of that Internal rail?
     * How close can planes fly to each other over the ocean?
     * What does the pointer 'this+1' refer to in C++?
     * Intuition regarding Limits.
     * Within Fibonacci Numbers
     * An English word (adj or verb) to describe your feeling when you did
       not do something you were expected to do
     * Will it halt? (Robbers)
     * How to convert input expression to FullForm String
     * How would deafening as punishment be carried out?
     * How Long Could an Eternal Fire Last?
     * What's the in-universe relevance for the name of Spider-Man:
       Homecoming?
     * Life Jacket for a person without arms?
     * (bash) Script A, wait for script B, but not its child process
     * Would pyrokinesis be an effective defense?
     * What medical costs burden the military enough to warrant banning all
       transgender people?
     * Do the circles overlap?
     * What RPG concepts does "rules as written" encompass?
     * Project Euler Problem #8: Largest product in a series
     * Will it halt? (Cops)
     * Why isn't `|` treated literally in a glob pattern?
     * Did JFK call himself a jelly donut in his famous Berlin speech?
     * How to tell friends something goes against my religion?
     * What kind of wire connectors are these?
     * Is there a term for the part of a word that "pluralizes" it?
   more hot questions
   question feed
     * about us
     * tour
     * help
     * blog
     * chat
     * data
     * legal
     * privacy policy
     * work here
     * advertising info
     * mobile
     * contact us
     * feedback
Technology                                                 Life / Arts       Culture / Recreation             Science          Other        
                                                            1. Photography    1. English                                                    
 1. Stack         1. Geographic                             2. Science           Language &                                                 
    Overflow         Information        1. Network             Fiction &         Usage                                                      
 2. Server Fault     Systems               Engineering         Fantasy        2. Skeptics                      1. MathOverflow              
 3. Super User    2. Electrical         2. Cryptography     3. Graphic        3. Mi Yodeya                     2. Mathematics               
 4. Web              Engineering        3. Code Review         Design            (Judaism)                     3. Cross                     
    Applications  3. Android            4. Magento          4. Movies & TV    4. Travel                           Validated     1. Meta     
 5. Ask Ubuntu       Enthusiasts        5. Software         5. Music:         5. Christianity                     (stats)          Stack    
 6. Webmasters    4. Information           Recommendations     Practice &     6. English       1. Motor        4. Theoretical      Exchange 
 7. Game             Security           6. Signal              Theory            Language         Vehicle         Computer      2. Stack
    Development   5. Database              Processing       6. Worldbuilding     Learners         Maintenance     Science          Apps
 8. TeX - LaTeX      Administrators     7. Emacs            7. Seasoned       7. Japanese         & Repair     5. Physics       3. Area 51
 9. Software      6. Drupal Answers     8. Raspberry Pi        Advice            Language      2. more (32)    6. Chemistry     4. Stack
    Engineering   7. SharePoint         9. Programming         (cooking)      8. Arqade                        7. Biology          Overflow
10. Unix & Linux  8. User Experience       Puzzles & Code   8. Home              (gaming)                      8. Computer         Talent
11. Ask           9. Mathematica           Golf                Improvement    9. Bicycles                         Science
    Different    10. Salesforce        10. Ethereum         9. Personal      10. Role-playing                  9. Philosophy
    (Apple)      11. ExpressionEngine® 11. Data Science        Finance &         Games                        10. more (10)
12. WordPress        Answers           12. Arduino             Money         11. Anime &      
    Development  12. Blender           13. more (26)       10. Academia          Manga        
                                                           11. Law           12. Puzzling     
                                                           12. more (17)     

   site design / logo © 2017 Stack Exchange Inc; user contributions licensed
   under cc by-sa 3.0 with attribution required
   rev 2017.7.27.26630
   Code Review Stack Exchange works best with JavaScript enabled
